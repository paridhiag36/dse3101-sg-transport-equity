}
orig_mean <- mean(original_scores()$avg_acc_score, na.rm = TRUE)
sim_mean <- mean(acc_scores()$avg_acc_score, na.rm = TRUE)
improvement <- (sim_mean - orig_mean) / orig_mean * 100
improved_subzones <- sum(acc_scores()$avg_acc_score > original_scores()$avg_acc_score, na.rm = TRUE)
total_subzones <- nrow(original_scores())
cat("Original mean score:", round(orig_mean, 3), "\n")
cat("Simulated mean score:", round(sim_mean, 3), "\n")
cat("Average improvement:", round(improvement, 1), "%\n")
cat("Subzones improved:", improved_subzones, "of", total_subzones,
paste0("(", round(improved_subzones/total_subzones*100, 1), "%)\n"))
cat("Maximum improvement:",
round(max(acc_scores()$avg_acc_score - original_scores()$avg_acc_score, na.rm = TRUE)*100, 1), "%\n")
})
# Impact plot
output$impact_plot <- renderPlot({
if(!simulation_active()) return()
comparison_df <- original_scores() %>%
rename(original_score = avg_acc_score) %>%
left_join(acc_scores() %>% rename(simulated_score = avg_acc_score), by = "origin")
ggplot(comparison_df, aes(x = original_score, y = simulated_score)) +
geom_point(aes(color = simulated_score - original_score), size = 3, alpha = 0.7) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
scale_color_gradient2(low = "red", mid = "gray", high = "blue",
midpoint = 0, name = "Improvement") +
labs(x = "Original Accessibility Score", y = "Simulated Accessibility Score",
title = "Simulation Impact on Subzones",
subtitle = "Points above the diagonal line represent improved subzones") +
theme_minimal() +
theme(legend.position = "bottom")
})
# Improvement histogram
output$improvement_hist <- renderPlot({
if(!simulation_active()) return()
comparison_df <- original_scores() %>%
rename(original_score = avg_acc_score) %>%
left_join(acc_scores() %>% rename(simulated_score = avg_acc_score), by = "origin") %>%
mutate(improvement = (simulated_score - original_score) * 100)
ggplot(comparison_df, aes(x = improvement)) +
geom_histogram(binwidth = 2, fill = "steelblue", color = "white") +
geom_vline(xintercept = 0, linetype = "dashed", color = "red") +
labs(x = "Improvement in Accessibility Score (%)", y = "Number of Subzones",
title = "Distribution of Accessibility Improvements") +
theme_minimal()
})
}
shinyApp(ui = ui, server = server)
runApp('Desktop/DSE3101/RShiny_Code/prototype3/test.R')
runApp('Desktop/DSE3101/RShiny_Code/prototype3/test.R')
ui <- navbarPage(
title = tagList(icon("bus"), "Transport Equity"),
theme = shinytheme("flatly"),
tabPanel(
"Simulation",
fluidPage(
titlePanel("MRT Stop Simulation"),
sidebarLayout(
sidebarPanel(
width = 4,
div(
,
leafletOutput("sation_map", height = 400),
tags$p("Click on the map to place a new MRT station"),
actionButton("resetPin", "Reset Pin", icon = icon("undo")),
hr()
),
)
)
)
)
)
View(extract_data_from_html)
source("~/Desktop/DSE3101/RShiny_Code/prototype3/test.R", echo=TRUE)
ui <- navbarPage(
title = tagList(icon("bus"), "Transport Equity"),
theme = shinytheme("flatly"),
tabPanel(
"Simulation",
fluidPage(
titlePanel("MRT Stop Simulation"),
sidebarLayout(
sidebarPanel(
width = 4,
div(
leafletOutput("station_map", height = 400),
tags$p("Click on the map to place a new MRT station"),
actionButton("resetPin", "Reset Pin", icon = icon("undo")),
hr()
)
),
mainPanel(
# Can add other content to main panel if needed
)
)
)
)
)
ui <- navbarPage(
title = tagList(icon("bus"), "Transport Equity"),
theme = shinytheme("flatly"),
tabPanel(
"Simulation",
fluidPage(
titlePanel("MRT Stop Simulation"),
sidebarLayout(
sidebarPanel(
width = 4,
div(
leafletOutput("station_map", height = 400),
tags$p("Click on the map to place a new MRT station"),
actionButton("resetPin", "Reset Pin", icon = icon("undo")),
hr()
)
),
mainPanel(
# Can add other content to main panel if needed
)
)
)
)
)
server <- function(input, output, session) {
runApp('Desktop/DSE3101/RShiny_Code/prototype3/test.R')
sdf
runApp('Desktop/DSE3101/RShiny_Code/prototype3/test.R')
runApp('Desktop/DSE3101/RShiny_Code/prototype3/app_sim.R')
df
shiny::runApp('Desktop/DSE3101/RShiny_Code/prototype3')
library(readr)
healthcare_final <- read_csv("Desktop/DSE3101/RShiny_Code/prototype3/healthcare_final.csv")
View(healthcare_final)
simulation=read_csv('full_simulation.csv') %>%
rename(
'TT' = 'Duration (min)' ,
'TWD' = 'WalkDistance (m)',
'TRF'= 'Transfers') %>%
filter(!(first_stop_name==last_stop_name)) %>%
filter(!first_stop_name=='no value') %>%
filter(!last_stop_name=='no value') %>%
mutate(first_stop_lat=as.numeric(first_stop_lat),
first_stop_long=as.numeric(first_stop_long),
last_stop_lat=as.numeric(last_stop_lat),
last_stop_long=as.numeric(last_stop_long)) %>%
mutate(origin_to_firststop = haversine(Subzone_Lat,Subzone_Long, first_stop_lat,first_stop_long)) %>%
mutate(dest_to_laststop = haversine(Hospital_Polyclinic_Lat,Hospital_Polyclinic_Long, last_stop_lat,last_stop_long)) %>%
mutate(
mutate(TT = (TT - min(TT)) / (max(TT) - min(TT))),
#TWD = (TWD - median(TWD)) / IQR(TWD), will be normalised AFTER calculating new_TWD
mutate(TRF = (TRF - min(TRF)) / (max(TRF) - min(TRF)))
) %>% # Robust scaling, to minimise effect of outliars
mutate(Subzone=toupper(Subzone)) %>%
mutate(HD=haversine(Subzone_Lat,Subzone_Long, Hospital_Polyclinic_Lat,Hospital_Polyclinic_Long)) %>%
mutate(HD = (HD - median(HD)) / IQR(HD)) %>%
mutate(HD = (HD - mean(HD)) / sd(HD))
setwd("~/Desktop/DSE3101/RShiny_Code/prototype3")
simulation=read_csv('full_simulation.csv') %>%
rename(
'TT' = 'Duration (min)' ,
'TWD' = 'WalkDistance (m)',
'TRF'= 'Transfers') %>%
filter(!(first_stop_name==last_stop_name)) %>%
filter(!first_stop_name=='no value') %>%
filter(!last_stop_name=='no value') %>%
mutate(first_stop_lat=as.numeric(first_stop_lat),
first_stop_long=as.numeric(first_stop_long),
last_stop_lat=as.numeric(last_stop_lat),
last_stop_long=as.numeric(last_stop_long)) %>%
mutate(origin_to_firststop = haversine(Subzone_Lat,Subzone_Long, first_stop_lat,first_stop_long)) %>%
mutate(dest_to_laststop = haversine(Hospital_Polyclinic_Lat,Hospital_Polyclinic_Long, last_stop_lat,last_stop_long)) %>%
mutate(
mutate(TT = (TT - min(TT)) / (max(TT) - min(TT))),
#TWD = (TWD - median(TWD)) / IQR(TWD), will be normalised AFTER calculating new_TWD
mutate(TRF = (TRF - min(TRF)) / (max(TRF) - min(TRF)))
) %>% # Robust scaling, to minimise effect of outliars
mutate(Subzone=toupper(Subzone)) %>%
mutate(HD=haversine(Subzone_Lat,Subzone_Long, Hospital_Polyclinic_Lat,Hospital_Polyclinic_Long)) %>%
mutate(HD = (HD - median(HD)) / IQR(HD)) %>%
mutate(HD = (HD - mean(HD)) / sd(HD))
simulation=read_csv('full_simulation.csv') %>%
rename(
'TT' = 'Duration (min)' ,
'TWD' = 'WalkDistance (m)',
'TRF'= 'Transfers') %>%
filter(!(first_stop_name==last_stop_name)) %>%
filter(!first_stop_name=='no value') %>%
filter(!last_stop_name=='no value') %>%
mutate(first_stop_lat=as.numeric(first_stop_lat),
first_stop_long=as.numeric(first_stop_long),
last_stop_lat=as.numeric(last_stop_lat),
last_stop_long=as.numeric(last_stop_long)) %>%
mutate(origin_to_firststop = haversine(Subzone_Lat,Subzone_Long, first_stop_lat,first_stop_long)) %>%
mutate(dest_to_laststop = haversine(Hospital_Polyclinic_Lat,Hospital_Polyclinic_Long, last_stop_lat,last_stop_long)) %>%
mutate(
mutate(TT = (TT - min(TT)) / (max(TT) - min(TT))),
#TWD = (TWD - median(TWD)) / IQR(TWD), will be normalised AFTER calculating new_TWD
#mutate(TRF = (TRF - min(TRF)) / (max(TRF) - min(TRF)))
) %>% # Robust scaling, to minimise effect of outliars
mutate(Subzone=toupper(Subzone)) %>%
mutate(HD=haversine(Subzone_Lat,Subzone_Long, Hospital_Polyclinic_Lat,Hospital_Polyclinic_Long)) %>%
mutate(HD = (HD - median(HD)) / IQR(HD)) %>%
mutate(HD = (HD - mean(HD)) / sd(HD))
simulation=read_csv('full_simulation.csv') %>%
rename(
'TT' = 'Duration (min)' ,
'TWD' = 'WalkDistance (m)',
'TRF'= 'Transfers') %>%
filter(!(first_stop_name==last_stop_name)) %>%
filter(!first_stop_name=='no value') %>%
filter(!last_stop_name=='no value') %>%
mutate(first_stop_lat=as.numeric(first_stop_lat),
first_stop_long=as.numeric(first_stop_long),
last_stop_lat=as.numeric(last_stop_lat),
last_stop_long=as.numeric(last_stop_long)) %>%
mutate(origin_to_firststop = haversine(Subzone_Lat,Subzone_Long, first_stop_lat,first_stop_long)) %>%
mutate(dest_to_laststop = haversine(Hospital_Polyclinic_Lat,Hospital_Polyclinic_Long, last_stop_lat,last_stop_long)) %>%
mutate(
TT = (TT - min(TT)) / (max(TT) - min(TT)),
#TWD = (TWD - median(TWD)) / IQR(TWD), will be normalised AFTER calculating new_TWD
TRF = (TRF - min(TRF)) / (max(TRF) - min(TRF))
) %>% # Robust scaling, to minimise effect of outliars
mutate(Subzone=toupper(Subzone)) %>%
mutate(HD=haversine(Subzone_Lat,Subzone_Long, Hospital_Polyclinic_Lat,Hospital_Polyclinic_Long)) %>%
mutate(HD = (HD - median(HD)) / IQR(HD)) %>%
mutate(HD = (HD - mean(HD)) / sd(HD))
runApp()
runApp()
runApp()
shiny::runApp()
library(readr)
top5_healthcare <- read_csv("~/Desktop/DSE3101/RShiny_Code/top5_healthcare.csv")
View(top5_healthcare)
runApp()
simulation=read_csv('full_simulation.csv') %>%
rename(
'TT' = 'Duration (min)' ,
'TWD' = 'WalkDistance (m)',
'TRF'= 'Transfers') %>%
filter(!(first_stop_name==last_stop_name)) %>%
filter(!first_stop_name=='no value') %>%
filter(!last_stop_name=='no value') %>%
mutate(first_stop_lat=as.numeric(first_stop_lat),
first_stop_long=as.numeric(first_stop_long),
last_stop_lat=as.numeric(last_stop_lat),
last_stop_long=as.numeric(last_stop_long)) %>%
mutate(origin_to_firststop = haversine(Subzone_Lat,Subzone_Long, first_stop_lat,first_stop_long)) %>%
mutate(dest_to_laststop = haversine(Hospital_Polyclinic_Lat,Hospital_Polyclinic_Long, last_stop_lat,last_stop_long)) %>%
mutate(
TT = (TT - min(TT)) / (max(TT) - min(TT)),
#TWD = (TWD - median(TWD)) / IQR(TWD), will be normalised AFTER calculating new_TWD
TRF = (TRF - min(TRF)) / (max(TRF) - min(TRF))
) %>% # Robust scaling, to minimise effect of outliars
mutate(Subzone=toupper(Subzone)) %>%
mutate(HD=haversine(Subzone_Lat,Subzone_Long, Hospital_Polyclinic_Lat,Hospital_Polyclinic_Long)) %>%
mutate(HD = (HD-min(HD)) / (max(HD) - min(HD)))
runApp()
runApp()
runApp()
runApp()
runApp('divya_app.R')
library(shiny); runApp('app1 (1).R')
View(subzone_boundaries)
View(simulation)
simulation=read_csv('full_simulation.csv') %>%
rename(
'TT' = 'Duration (min)' ,
'TWD' = 'WalkDistance (m)',
'TRF'= 'Transfers') %>%
filter(!(first_stop_name==last_stop_name)) %>%
filter(!first_stop_name=='no value') %>%
filter(!last_stop_name=='no value') %>%
mutate(first_stop_lat=as.numeric(first_stop_lat),
first_stop_long=as.numeric(first_stop_long),
last_stop_lat=as.numeric(last_stop_lat),
last_stop_long=as.numeric(last_stop_long)) %>%
mutate(origin_to_firststop = haversine(Subzone_Lat,Subzone_Long, first_stop_lat,first_stop_long)) %>%
mutate(dest_to_laststop = haversine(Hospital_Polyclinic_Lat,Hospital_Polyclinic_Long, last_stop_lat,last_stop_long)) %>%
mutate(
TT = (TT - min(TT)) / (max(TT) - min(TT)),
#TWD = (TWD - median(TWD)) / IQR(TWD), will be normalised AFTER calculating new_TWD
TRF = (TRF - min(TRF)) / (max(TRF) - min(TRF))
) %>% # Robust scaling, to minimise effect of outliars
mutate(Subzone=toupper(Subzone)) %>%
mutate(HD=haversine(Subzone_Lat,Subzone_Long, Hospital_Polyclinic_Lat,Hospital_Polyclinic_Long)) %>%
mutate(HD = (HD-min(HD)) / (max(HD) - min(HD))) %>%
mutate(first_type = recode(first_type,
"SUBWAY" = "MRT",
"TRAM" = "LRT"))
View(simulation)
simulation=read_csv('full_simulation.csv') %>%
rename(
'TT' = 'Duration (min)' ,
'TWD' = 'WalkDistance (m)',
'TRF'= 'Transfers') %>%
filter(!(first_stop_name==last_stop_name)) %>%
filter(!first_stop_name=='no value') %>%
filter(!last_stop_name=='no value') %>%
mutate(first_stop_lat=as.numeric(first_stop_lat),
first_stop_long=as.numeric(first_stop_long),
last_stop_lat=as.numeric(last_stop_lat),
last_stop_long=as.numeric(last_stop_long)) %>%
mutate(origin_to_firststop = haversine(Subzone_Lat,Subzone_Long, first_stop_lat,first_stop_long)) %>%
mutate(dest_to_laststop = haversine(Hospital_Polyclinic_Lat,Hospital_Polyclinic_Long, last_stop_lat,last_stop_long)) %>%
mutate(
TT = (TT - min(TT)) / (max(TT) - min(TT)),
#TWD = (TWD - median(TWD)) / IQR(TWD), will be normalised AFTER calculating new_TWD
TRF = (TRF - min(TRF)) / (max(TRF) - min(TRF))
) %>% # Robust scaling, to minimise effect of outliars
mutate(Subzone=toupper(Subzone)) %>%
mutate(HD=haversine(Subzone_Lat,Subzone_Long, Hospital_Polyclinic_Lat,Hospital_Polyclinic_Long)) %>%
mutate(HD = (HD-min(HD)) / (max(HD) - min(HD))) %>%
mutate(first_type = recode(first_type,
"SUBWAY" = "MRT",
"TRAM" = "LRT")) %>%
mutate(last_type = recode(last_type,
"SUBWAY" = "MRT",
"TRAM" = "LRT"))
View(simulation)
runApp('app1 (1).R')
library(readr)
planning_area_demographics <- read_csv("planning_area_demographics.csv")
View(planning_area_demographics)
runApp('app1 (1).R')
runApp('app1 (1).R')
View(simulation)
runApp('app1 (1).R')
runApp('app1 (1).R')
runApp('app1 (1).R')
runApp('app1 (1).R')
runApp('app1 (1).R')
runApp('app1 (1).R')
runApp('app1 (1).R')
runApp('app1 (1).R')
runApp('app1 (1).R')
runApp('app1 (1).R')
runApp('app1 (1).R')
runApp('app1 (1).R')
runApp('app1 (1).R')
runApp('app1 (1).R')
runApp('app1 (1).R')
runApp('app1 (1).R')
runApp('app1 (1).R')
runApp('app1 (1).R')
runApp()
knitr::opts_chunk$set(echo = TRUE)
# Load data
data <- read_csv("planning_area_demographics.csv")
# Set default theme
theme_set(theme_void())
# Create output folder
output_dir <- "C:\\Users\\dawnk\\OneDrive\\Documents\\dse3101-LTAProject\\planning_area_pie_charts"
dir.create(output_dir, showWarnings = FALSE)
# Loop over each planning area for gender and age group pie charts
for (i in 1:nrow(data)) {
area_data <- data[i, ]
area_name <- area_data$`Planning Area`
# --- GENDER PIE CHART ---
gender_counts <- as.numeric(c(area_data$Males_Total, area_data$Females_Total))
if (!all(gender_counts == 0, na.rm = TRUE)) {
gender_df <- tibble(
Gender = c("Males", "Females"),
Count = gender_counts
)
gender_plot <- ggplot(gender_df, aes(x = "", y = Count, fill = Gender)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
labs(title = paste("Gender Distribution -", area_name)) +
scale_fill_manual(values = c("Males" = "#3366cc", "Females" = "#db3a1b")) +
geom_text(aes(label = paste0(round(Count / sum(Count) * 100, 1), "%")),
position = position_stack(vjust = 0.5)) +
theme(
plot.background = element_rect(fill = "white", color = NA),
panel.background = element_rect(fill = "white", color = NA)
)
ggsave(filename = file.path(output_dir, paste0(area_name, "_gender.png")),
plot = gender_plot, width = 5, height = 5, bg = "white")
} else {
cat(paste("Skipping gender plot for", area_name, "- all values are 0\n"))
}
# --- AGE GROUP PIE CHART ---
age_counts <- as.numeric(c(area_data$`Total 0-14`, area_data$`Total 15-64`, area_data$`Total 65+`))
if (!all(age_counts == 0, na.rm = TRUE)) {
age_df <- tibble(
AgeGroup = c("0-14 years", "15-64 years", "65+ years"),
Count = age_counts
)
age_plot <- ggplot(age_df, aes(x = "", y = Count, fill = AgeGroup)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
labs(title = paste("Age Group Distribution -", area_name)) +
scale_fill_manual(values = c("0-14 years" = "#3366cc",
"15-64 years" = "#db3a1b",
"65+ years" = "#ffa500")) +
geom_text(aes(label = paste0(round(Count / sum(Count) * 100, 1), "%")),
position = position_stack(vjust = 0.5)) +
theme(
plot.background = element_rect(fill = "white", color = NA),
panel.background = element_rect(fill = "white", color = NA)
)
ggsave(filename = file.path(output_dir, paste0(area_name, "_age.png")),
plot = age_plot, width = 5, height = 5, bg = "white")
} else {
cat(paste("Skipping age plot for", area_name, "- all values are 0\n"))
}
}
# --- DETAILED AGE GROUP BAR CHARTS ---
# Clean the Planning Area column
data_barchart <- df_total %>%
mutate(`Planning Area` = str_remove(`Planning Area`, " ?- Total"))
library(readr)
planning_area_demographics <- read_csv("planning_area_demographics.csv")
View(planning_area_demographics)
View(planning_area_demographics)
View(subzone_boundaries)
len(unique(subzone_boundaries$Planning_Area))
nrow(unique(subzone_boundaries$Planning_Area))
unique(subzone_boundaries$Planning_Area)
tolower(unique(subzone_boundaries$Planning_Area))
planning_area_demographics%>% filter(tolower(`Planning Area`) %in% subzone_boundaries$`Planning Area`)
planning_area_demographics%>% filter(tolower(`Planning Area`) %in% tolower( subzone_boundaries$`Planning Area`))
planning_area_demographics%>% filter(tolower(`Planning Area`) %in% tolower(unique(subzone_boundaries$`Planning Area`)))
tolower(unique(subzone_boundaries$`Planning Area`))
planning_area_demographics%>% filter(tolower(`Planning Area`) %in% tolower(unique(subzone_boundaries$Planning_Area)))
planning_area_demographics%>% filter(!tolower(`Planning Area`) %in% tolower(unique(subzone_boundaries$Planning_Area)))
data <- read_csv("planning_area_demographics.csv") %>%
rename('Planning_Area' = 'Planning Area')
data <- read_csv("planning_area_demographics.csv") %>%
rename('Planning_Area' = 'Planning Area') %>%
filter(!Planning_Area=='Southern Islands')
runApp()
demographic_data <- read_csv("planning_area_demographics.csv") %>%
rename('Planning_Area' = 'Planning Area') %>%
filter(!Planning_Area=='Southern Islands')
View(demographic_data)
runApp()
runApp()
age_data <- read_csv("planning_area_demographics.csv") %>%
rename('Planning_Area' = 'Planning Area') %>%
filter(!Planning_Area=='Southern Islands') %>%
pivot_longer(
cols = starts_with("Age_"),
names_to = "Age_Group",
names_prefix = "Age_",
values_to = "Population"
) %>%
mutate(
Age_Group = factor(Age_Group,
levels = c("0_14", "15_64", "65_plus"),
labels = c("0-14", "15-64", "65+"))
)
age_data <- read_csv("planning_area_demographics.csv") %>%
rename('Planning_Area' = 'Planning Area') %>%
filter(!Planning_Area=='Southern Islands') %>%
pivot_longer(
cols = starts_with("Age_"),
names_to = "Age_Group",
names_prefix = "Age_",
values_to = "Population"
)
colnames(demographic_data)
age_data <- read_csv("planning_area_demographics.csv") %>%
rename('Planning_Area' = 'Planning Area') %>%
filter(!Planning_Area=='Southern Islands') %>%
pivot_longer(
cols = starts_with("Age_"),
names_to = "Age_Group",
names_prefix = "Total ",
values_to = "Population"
)
age_data <- read_csv("planning_area_demographics.csv") %>%
rename('Planning_Area' = 'Planning Area') %>%
filter(!Planning_Area=='Southern Islands') %>%
pivot_longer(
cols = starts_with("Total "),
names_to = "Age_Group",
names_prefix = "Total ",
values_to = "Population"
)
View(age_data)
colnames()
colnames(demographic_data)
age_data <- read_csv("planning_area_demographics.csv") %>%
rename('Planning_Area' = 'Planning Area') %>%
filter(!Planning_Area=='Southern Islands') %>%
select(`Total 0-14`,`Total 15-64`,`Total 65+`)%>%
pivot_longer(
cols = starts_with("Total "),
names_to = "Age_Group",
names_prefix = "Total ",
values_to = "Population"
)
View(age_data)
age_data <- read_csv("planning_area_demographics.csv") %>%
rename('Planning_Area' = 'Planning Area') %>%
filter(!Planning_Area=='Southern Islands') %>%
select(Planning_Area,`Total 0-14`,`Total 15-64`,`Total 65+`)%>%
pivot_longer(
cols = starts_with("Total "),
names_to = "Age_Group",
names_prefix = "Total ",
values_to = "Population"
)
runApp()
age_data %>%
filter(Planning_Area == 'Marina East')
runApp()
runApp()
runApp()
runApp()
unique(age_data$Planning_Area)
runApp()
runApp()
runApp()
